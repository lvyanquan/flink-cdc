/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.flink.cdc.connectors.hologres;

import org.apache.flink.annotation.VisibleForTesting;

import com.alibaba.hologres.client.HoloClient;
import com.alibaba.hologres.client.HoloConfig;
import com.alibaba.hologres.client.exception.HoloClientException;
import com.alibaba.hologres.client.impl.ExecutionPool;

import javax.annotation.Nullable;

import java.util.Objects;

/** HoloClient factory which supports create holo client based on AK. */
public class HologresJDBCClientProvider {
    private HoloClient client;
    private final HoloConfig holoConfig;

    private final String jdbcSharedConnectionPoolName;

    public HologresJDBCClientProvider(HoloConfig holoConfig) {
        this(holoConfig, null);
    }

    public HologresJDBCClientProvider(
            HoloConfig holoConfig, @Nullable String jdbcSharedConnectionPoolName) {
        this.jdbcSharedConnectionPoolName = jdbcSharedConnectionPoolName;
        this.holoConfig = holoConfig;
    }

    /**
     * getClient with some option.
     *
     * @param forceReconnect If this param is true, provider will produce new client and aliyun
     *     account will not change.
     * @param forceRefresh If this param is true and current account is generated by STS, provider
     *     will request new STS account and produce new client. If this param is true and current
     *     account is normal account, provider will just produce new client.
     * @return return client.
     */
    public HoloClient getClient(boolean forceReconnect, boolean forceRefresh) {
        if (forceRefresh || forceReconnect || client == null) {
            closeClient();
            client = produceClient();
            return client;
        } else {
            return client;
        }
    }

    public HoloClient getClient(boolean forceReconnect) {
        return getClient(forceReconnect, false);
    }

    public HoloClient getClient() {
        return getClient(false, false);
    }

    public void closeClient() {
        if (client == null) {
            return;
        }
        try {
            client.flush();
        } catch (HoloClientException e) {
            throw new RuntimeException("Failed to close client", e);
        } finally {
            client.close();
        }
        client = null;
    }

    private HoloClient produceClient() {
        try {
            client = new HoloClient(holoConfig);
            // use pool name to get share connection pool.
            if (jdbcSharedConnectionPoolName != null) {
                ExecutionPool pool = ExecutionPool.buildOrGet(getUniquePoolName(), holoConfig);
                client.setPool(pool);
            }
            return client;
        } catch (HoloClientException e) {
            throw new RuntimeException("Fail to create holo client", e);
        }
    }

    @VisibleForTesting
    protected String getUniquePoolName() {
        // Different databases or even different instances may be used in user jobs. An exception
        // may occur if the same pool name is used.
        return "ExecutionPool-"
                + Objects.hash(
                        holoConfig.getJdbcUrl(),
                        holoConfig.getUsername(),
                        holoConfig.getPassword(),
                        holoConfig.getSslMode(),
                        holoConfig.getSslMode(),
                        holoConfig.getSslRootCertLocation())
                + jdbcSharedConnectionPoolName;
    }
}
